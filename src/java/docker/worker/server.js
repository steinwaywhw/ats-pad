// Generated by CoffeeScript 1.7.1
(function() {
  var express, http, io, pty, server, termjs;

  http = require('http');

  express = require('express');

  io = require('socket.io');

  pty = require('pty.js');

  termjs = require('term.js');

  server = {
    term: null,
    buff: [],
    server: null,
    room: 'clients',
    termup: function(opts) {
      var term_opts, _ref, _ref1, _ref2, _ref3;
      term_opts = {
        name: (_ref = require('fs').existsSync('/usr/share/terminfo/x/xterm-256color')) != null ? _ref : {
          'xterm-256color': 'xterm'
        },
        cols: (_ref1 = opts != null ? opts.cols : void 0) != null ? _ref1 : 140,
        rows: (_ref2 = opts != null ? opts.rows : void 0) != null ? _ref2 : 19,
        cwd: (_ref3 = opts != null ? opts.cwd : void 0) != null ? _ref3 : '/root/atspad'
      };
      return this.term = pty.fork('bash', ['--rcfile', '/root/.bashrc'], term_opts);
    },
    binding: function() {
      this.term.on('data', (function(_this) {
        return function(data) {
          if (_this.server.engine.clientsCount !== 0) {
            return _this.server.sockets["in"](_this.room).emit('data', data);
          } else {
            return _this.buff.push(data);
          }
        };
      })(this));
      return this.server.on('connection', (function(_this) {
        return function(socket) {
          var _results;
          socket.join(_this.room);
          socket.on('data', function(data) {
            return _this.term.write(data);
          });
          socket.on('disconnect', function() {
            return socket.leave(_this.room);
          });
          _results = [];
          while (_this.buff.length) {
            _results.push(_this.server.sockets["in"](_this.room).emit('data', _this.buff.shift()));
          }
          return _results;
        };
      })(this));
    },
    serverup: function(opts) {
      var app, httpserver, server_opts, _ref, _ref1;
      app = express();
      httpserver = http.createServer(app);
      app.use(express["static"](__dirname));
      app.use(termjs.middleware());
      httpserver.listen((_ref = opts != null ? opts.port : void 0) != null ? _ref : 8023);
      server_opts = {
        path: (_ref1 = opts != null ? opts.path : void 0) != null ? _ref1 : "/console",
        log: true
      };
      return this.server = new io(httpserver, server_opts);
    },
    run: function(opts) {
      this.termup(opts);
      this.serverup(opts);
      return this.binding();
    }
  };

  module.exports = server;

}).call(this);
