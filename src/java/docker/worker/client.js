// Generated by CoffeeScript 1.7.1
  var client;

  client = {
    "default": function(options) {
      var _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8;
      return {
        path: (_ref = options != null ? options.path : void 0) != null ? _ref : "/console",
        remote: (_ref1 = options != null ? options.remote : void 0) != null ? _ref1 : "http://localhost:8080",
        reconnection_delay: (_ref2 = options != null ? options.reconnection_delay : void 0) != null ? _ref2 : 500,
        max_reconnection_attempts: (_ref3 = options != null ? options.max_reconnection_attempts : void 0) != null ? _ref3 : 20,
        cols: (_ref4 = options != null ? options.cols : void 0) != null ? _ref4 : 180,
        rows: (_ref5 = options != null ? options.rows : void 0) != null ? _ref5 : 30,
        parent: (_ref6 = options != null ? options.parent : void 0) != null ? _ref6 : document.body,
        connect_timeout: (_ref7 = options != null ? options.connect_timeout : void 0) != null ? _ref7 : 10000,
        focus: (_ref8 = options != null ? options.focus : void 0) != null ? _ref8 : false
      };
    },
    term: null,
    open: function(options) {
      var term;
      options = this["default"](options);
      term = new Terminal({
        cols: options.cols,
        rows: options.rows,
        useStyle: true,
        screenKeys: true
      });
      term.open(options.parent);
      return this.term = term;
    },
    run: function(options) {
      var socket;
      if (this.term == null) {
        this.open(options);
      }
      options = this["default"](options);
      localStorage.debug = "*";
      socket = io.connect(options.remote, {
        path: options.path,
        connectTimeout: options.connect_timeout,
        reconnectionDelay: options.reconnection_delay,
        maxReconnectionAttempts: 2
      });
      this.term.on('data', (function(_this) {
        return function(data) {
          socket.emit('data', data);
          return _this.term.write(socket);
        };
      })(this));
      socket.on('data', (function(_this) {
        return function(data) {
          return _this.term.write(data);
        };
      })(this));
      socket.on('connecting', (function(_this) {
        return function() {
          return _this.term.write("Connecting to " + options.remote + "\r\n");
        };
      })(this));
      socket.on('reconnecting', (function(_this) {
        return function() {
          return _this.term.write("Reconnecting\r\n");
        };
      })(this));
      socket.on('disconnect', (function(_this) {
        return function() {
          _this.term.write("\r\nDisconnected\r\n");
          return _this.term.write("Reconnecting\r\n");
        };
      })(this));
      socket.on('error', (function(_this) {
        return function() {
          _this.term.write("Connection error \r\n");
          return _this.term.write("Reconnecting\r\n");
        };
      })(this));
      socket.on('reconnect_failed', (function(_this) {
        return function() {
          _this.term.write("Connection failed\r\n");
          return _this.term.write("Reconnecting\r\n");
        };
      })(this));
      socket.on('connect_failed', (function(_this) {
        return function() {
          _this.term.write("Connection failed\r\n");
          return _this.term.write("Reconnecting\r\n");
        };
      })(this));
      socket.on('reconnect', (function(_this) {
        return function() {
          return _this.term.emit('data', "clear\n");
        };
      })(this));
      return socket.on('connect', (function(_this) {
        return function() {
          return _this.term.emit('data', "clear\n");
        };
      })(this));
    }
  };

