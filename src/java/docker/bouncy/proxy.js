// Generated by CoffeeScript 1.7.1
(function() {
  var papertrail, proxy, redis, winston;

  winston = require("winston");

  redis = require("redis");

  papertrail = require('winston-papertrail');

  redis.debug_mode = false;

  winston.add(winston.transports.Papertrail, {
    host: 'logs.papertrailapp.com',
    port: 20895,
    hostname: "bouncy",
    colorize: "true"
  });

  winston.exitOnError = false;

  proxy = {
    getRedis: function() {
      var _ref;
      if (process.env.ATSPAD_REDIS_IP == null) {
        return winston.error("Please specify ATSPAD_REDIS_IP");
      } else {
        return {
          ip: process.env.ATSPAD_REDIS_IP,
          prot: (_ref = process.env.ATSPAD_REDIS_PORT) != null ? _ref : 6379
        };
      }
    },
    onError: function(res) {
      res.statusCode = 500;
      return res.end('SORRY, SOMETHING IS WRONG!');
    },
    init: function() {
      winston.info("Initializing proxy server.");
      winston.info("Redis running at", this.getRedis());
      this.client = redis.createClient(this.getRedis().port, this.getRedis().ip);
      this.client.on("error", (function(_this) {
        return function(err) {
          return winston.error("Can't connect to redis: %j", err);
        };
      })(this));
      this.client.on("end", (function(_this) {
        return function() {
          return winston.info("Connection ended.");
        };
      })(this));
      return this.server = require("bouncy")((function(_this) {
        return function(req, res, bounce) {
          var wid, _ref, _ref1;
          winston.info("[request] %s", req.url);
          wid = (_ref = require("url").parse(req.url, true)) != null ? (_ref1 = _ref.query) != null ? _ref1.wid : void 0 : void 0;
          if (wid == null) {
            winston.error("Can't read wid from request: %j", req);
            _this.onError(res);
          }
          return _this.client.hgetall(wid, function(err, obj) {
            if (err) {
              winston.error("Error getting worker object: %j", err);
              return _this.onError(res);
            } else if (obj == null) {
              winston.error("Invalid worker object: %j", obj);
              return _this.onError(res);
            } else {
              _this.keepalive(wid);
              winston.info("Bouncing to", obj);
              return bounce("" + obj.ip + ":" + obj.port);
            }
          });
        };
      })(this));
    },
    run: function(port) {
      port = port != null ? port : 8023;
      winston.info("Proxy server running on %d", port);
      return this.server.listen(port);
    },
    keepalive: function(wid) {
      winston.info("Keep alive", Date.now());
      return this.client.hset(wid, "lastActive", Date.now());
    },
    server: null,
    client: null
  };

  module.exports = proxy;

}).call(this);
