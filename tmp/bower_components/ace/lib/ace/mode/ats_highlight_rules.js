/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* THIS FILE WAS AUTOGENERATED FROM ../../ats-mode-sublimetext/ats.tmLanguage (UUID: c3b7ee53-6117-4cdf-80ea-d0572e54aed7) */
/****************************************************************
 * IT MIGHT NOT BE PERFECT, PARTICULARLY:                       *
 * IN DECIDING STATES TO TRANSITION TO,                         *
 * IGNORING WHITESPACE,                                         *
 * IGNORING GROUPS WITH ?:,                                     *
 * EXTENDING EXISTING MODES,                                    *
 * GATHERING KEYWORDS, OR                                       *
 * DECIDING WHEN TO USE PUSH.                                   *
 * ...But it's a good start from an existing *.tmlanguage file. *
 ****************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var ATSHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = { start: 
       [
         { include: '#comment_rest' },
         { include: '#comment_line' },
         { include: '#comment_block' },
         { include: '#string' },
         { include: '#operators' },
         { include: '#keywords' } ],
      '#comment_block': 
       [ { token: 'comment.block.ats',
           regex: '\\(\\*',
           push: 
            [ { include: '#comment_block' },
              { token: 'comment.block.ats', regex: '\\*\\)', next: 'pop' },
              { defaultToken: 'comment.block.ats' } ] } ],
      '#comment_line': [ { token: 'comment.line.ats', regex: '//.*$' } ],
      '#comment_rest': 
       [ { token: 'comment.rest.ats',
           regex: '////',
           push: 
            [ { token: 'text', regex: '.*' },
              { token: 'comment.rest.ats', regex: '.\\z', next: 'pop' },
              { defaultToken: 'comment.rest.ats' } ] } ],
      '#keywords': 
       [ { caseInsensitive: true,
           token: 'keyword.ats',
           regex: '(\\#|\\$)(\\w+)|\\b(absvtype|vtypedef|absprop|abst@ype|abstype|absviewt@ype|absviewtype|absview|and|andalso|assume|as|begin|break|case(\\+|-)?|class|continue|dataprop|datasort|datatype|dataviewtype|dataview|dynload|dyn|else|end|exception|extern|fix|fn|for|fun|if|implement|infixl|infixr|infix|in|lam|let|llam|local|macdef|macrodef|method|modprop|modtype|module|nonfix|object|of|op|or|orelse|overload|par|postfix|praxi|prefix|prfn|prfun|propdef|prval|rec|sif|sortdef|stadef|staif|staload|stavar|sta|struct|symelim|symintr|then|try|typedef|union|val(\\+|-)?|var|viewdef|viewtypedef|when|where|while|withprop|withtype|withviewtype|withview|with)\\b' } ],
      '#operators': 
       [ { TODO: 'FIXME: regexp doesn\'t have js equivalent',
           token: 'keyword.operator.ats',
           regex: '!=|!|%|&&|&|\\*|\\+|-->|->|\\[|\\]|-|/|:=|<=|>=|==>|=>|>>|\\{|\\}|>|<|\\?|\\|\\||\\||~' } ],
     
      '#string': [ { token: 'string.ats', regex: '"[^"]*"' } ],
       }
    
    this.normalizeRules();
};

oop.inherits(ATSHighlightRules, TextHighlightRules);

exports.ATSHighlightRules = ATSHighlightRules;
});